<?php

/**
 * @file
 * Defines additional formatters and widget options for the
 * Address Field module.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function addressfield_extras_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return $plugin;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function addressfield_extras_field_formatter_info() {
  return array(
    'addressfield_city_only' => array(
      'label' => t('City only'),
      'description' => t('Output just the city, state and country part of an address field as a single line of comma-separated text.'),
      'field types' => array('addressfield'),
    ),
    'addressfield_country_only' => array(
      'label' => t('Country only'),
      'description' => t('Output just the country part of an address field as a single line.'),
      'field types' => array('addressfield'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function addressfield_extras_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] == 'addressfield_city_only') {
    $element = array();
    foreach ($items as $delta => $item) {
      $county = isset($item['sub_administrative_area']) ? $item['sub_administrative_area'] : NULL;
      $item['sub_administrative_area'] = (!empty($county) && empty($item['locality'])) ? t('@county County', array('@county' => $county)) : NULL;
      $region = isset($item['administrative_area']) ? $item['administrative_area'] : NULL;
      $country = isset($item['country']) ? $item['country'] : NULL;
      $item['administrative_area'] = !in_array($country, array('US', 'CA')) ? _addressfield_extras_region($region, $country) : $region;
      $series = array(
        $item['locality'],
        $item['sub_administrative_area'],
        $item['administrative_area'],
        $item['country'],
      );
      $all_existing = array_filter($series);
      $element[$delta]['#markup'] = implode(', ', $all_existing);
    }
    return $element;
  }
  elseif ($display['type'] == 'addressfield_country_only') {
    $available_countries = _addressfield_country_options_list();
    $element = array();
    foreach ($items as $delta => $item) {
//      $c = isset($item['country']) ? $item['country'] : NULL;
//      $s = array($item['country']);
//      $all_existing = array_filter($s);
//      $code = implode(', ', $all_existing);
      $code = $item['country'] ? $item['country'] : '';
      $country = isset($available_countries[$code]) ? $available_countries[$code] : $code;
      $element[$delta]['#markup'] = $country;
    }
    return $element;
  }
}

/**
 * Fix error message.
 *
 * See http://drupal.org/node/1175838 for details.
 *
 * Implements hook_field_formatter_prepare_view().
 */
function addressfield_extras_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  foreach ($entities as $id => $entity) {
    if (empty($items[$id])) {
      $items[$id][] = array();
    }
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function addressfield_extras_field_formatter_settings_summary($field, $instance, $view_mode) {
  $disp = $instance['display'][$view_mode];
  if ($disp['type'] == 'using_sharing') {
    $opts = array(
      'organization' => t('By organization'),
      'city' => t('By organizations in the same city'),
    );
    return t('How to count: "!by".', array('!by' => $opts[$disp['settings']['count_by']]));
  }
}

/**
 * Helper function to return region name.
 *
 * @param String $fip
 *   Our special region code.
 * @param String $iso
 *   Country code (ISO standard).
 *
 * @return String
 *   The name of the region.
 */
function _addressfield_extras_region($fip, $iso) {
  return _addressfield_extras_unquote(db_select('addressfield_extras_region')
    ->fields('addressfield_extras_region', array('name'))
    ->condition('fip', $fip, '=')
    ->condition('iso', $iso, '=')
    ->execute()
    ->fetchField(0));
}

/**
 * Helper function to strip out double quotes.
 *
 * @param String $string
 *   The string to be stripped.
 *
 * @return String
 *   The trimmed string.
 */
function _addressfield_extras_unquote($string) {
  return trim($string, '"');
}

/**
 * Helper function to identify options list separators.
 *
 * @param String $string
 *   The string to be tested.
 *
 * @return Boolean
 *   True if the string is something other than the separator.
 */
function _addressfield_extras_is_not_separator($string) {
  return $string != '--';
}

/**
 * Helper function to return country regions.
 *
 * @param String $country
 *   The name of the country.
 *
 * @return Array
 *   A keyed array of regions in that country.
 */
function _addressfield_extras_regions($country) {
  return array_map('_addressfield_extras_unquote', db_select('addressfield_extras_region')
    ->fields('addressfield_extras_region', array('fip', 'name'))
    ->condition('iso', $country, '=')
    ->execute()
    ->fetchAllKeyed(0));
}
